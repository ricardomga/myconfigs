* Interface tweaks
#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
  ;  (global-hl-line-mode)

    (defun xah-toggle-line-spacing ()
      "Toggle line spacing between no extra space to extra half line height."
      (interactive)
      (if (eq line-spacing nil)
          (setq line-spacing 0.5) ; add 0.5 height between lines
        (setq line-spacing nil)   ; no extra heigh between lines
        )
      (redraw-frame (selected-frame)))

    (global-set-key (kbd "C-c r l") 'xah-toggle-line-spacing)
#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp
  (use-package try
          :ensure t)
#+END_SRC
* Wich key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
          :ensure t 
          :config
          (which-key-mode))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Defalias
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

* Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
#+END_SRC

* Buffer Navigation
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC

* Auto complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

* Color theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :ensure t)

  ;; (use-package color-theme-sanityinc-tomorrow
  ;;   :ensure t
  ;;   :config (load-theme 'sanityinc-tomorrow-eighties))

  ;; (use-package zenburn-theme
  ;;   :ensure t
  ;;   :config (load-theme 'zenburn t))

  ;; (use-package material-theme
  ;;  :ensure t
  ;;  :config (load-theme 'material t))

  ;; (use-package apropospriate-theme
  ;;   :ensure t
  ;;   :config 
  ;;   (load-theme 'apropospriate-dark t))
  ;;   ;; (load-theme 'apropospriate-light t))

  ;; (use-package base16-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'base16-default-dark t))
#+END_SRC

* Toogle transparency
#+BEGIN_SRC emacs-lisp
  (defun toggle-transparency ()
     (interactive)
     (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                       ((numberp (cdr alpha)) (cdr alpha))
                       ;; Also handle undocumented (<active> <inactive>) form.
                       ((numberp (cadr alpha)) (cadr alpha)))
                 100)
            '(95 . 90) '(100 . 100)))))

   (global-set-key (kbd "C-c r t") 'toggle-transparency)
#+END_SRC

* Backups and auto save files 
#+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist
       `((".*" . ,temporary-file-directory)))
 (setq auto-save-file-name-transforms
       `((".*" ,temporary-file-directory t)))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

* Web mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\."))))

    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq js-indent-level 2)
      (setq web-mode-indent-style 2))

    (add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode))

#+END_SRC
* File Editing
#+BEGIN_SRC emacs-lisp
  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
          (exchange-point-and-mark))
      (let ((column (current-column))
            (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
     (t
      (let ((column (current-column)))
        (beginning-of-line)
        (when (or (> arg 0) (not (bobp)))
          (forward-line)
          (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg))
          (forward-line -1))
        (move-to-column column t)))))

  (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
    arg lines down."
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
    arg lines up."
    (interactive "*p")
    (move-text-internal (- arg)))

  (provide 'move-text)

  (global-set-key (kbd "M-p") 'move-text-up)
  (global-set-key (kbd "M-n") 'move-text-down)
#+END_SRC
* ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :init (require 'ess-site))
#+END_SRC
* Auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t))

  (with-eval-after-load "tex"
    (add-to-list 'TeX-view-program-list '("mupdf" "/usr/bin/mupdf %o"))
    (setcdr (assq 'output-pdf TeX-view-program-selection) '("mupdf")))


  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=pt_PT"))

#+END_SRC
* Mode line 
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
